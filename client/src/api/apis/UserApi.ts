/* tslint:disable */
/* eslint-disable */
/**
 * 簡易物品管理WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface AddUserRequest {
    user: User;
}

export interface GetUserListRequest {
    ids?: Array<number>;
}

export interface LoginRequest {
    inlineObject: InlineObject;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * ユーザ情報を登録します。
     * ユーザ情報登録
     */
    async addUserRaw(requestParameters: AddUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling addUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * ユーザ情報を登録します。
     * ユーザ情報登録
     */
    async addUser(requestParameters: AddUserRequest, initOverrides?: RequestInit): Promise<User> {
        const response = await this.addUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ユーザ情報の一覧を取得します。
     * ユーザ情報一覧取得
     */
    async getUserListRaw(requestParameters: GetUserListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * ユーザ情報の一覧を取得します。
     * ユーザ情報一覧取得
     */
    async getUserList(requestParameters: GetUserListRequest, initOverrides?: RequestInit): Promise<Array<User>> {
        const response = await this.getUserListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * NFCタグのシリアル番号でログインします。
     * ログイン
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inlineObject === null || requestParameters.inlineObject === undefined) {
            throw new runtime.RequiredError('inlineObject','Required parameter requestParameters.inlineObject was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * NFCタグのシリアル番号でログインします。
     * ログイン
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit): Promise<void> {
        await this.loginRaw(requestParameters, initOverrides);
    }

}
