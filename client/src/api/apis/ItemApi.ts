/* tslint:disable */
/* eslint-disable */
/**
 * 簡易物品管理WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Item,
    ItemFromJSON,
    ItemToJSON,
} from '../models';

export interface AddItemRequest {
    item: Item;
}

export interface GetItemListRequest {
    ids?: Array<number>;
    userId?: number;
    includeUsing?: boolean;
}

export interface UpdateItemRequest {
    itemId: string;
    item: Item;
}

/**
 * 
 */
export class ItemApi extends runtime.BaseAPI {

    /**
     * 物品情報を登録します。
     * 物品情報登録
     */
    async addItemRaw(requestParameters: AddItemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters.item === null || requestParameters.item === undefined) {
            throw new runtime.RequiredError('item','Required parameter requestParameters.item was null or undefined when calling addItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemToJSON(requestParameters.item),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * 物品情報を登録します。
     * 物品情報登録
     */
    async addItem(requestParameters: AddItemRequest, initOverrides?: RequestInit): Promise<Item> {
        const response = await this.addItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 物品情報の一覧を取得します。
     * 物品情報一覧取得
     */
    async getItemListRaw(requestParameters: GetItemListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Item>>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.includeUsing !== undefined) {
            queryParameters['includeUsing'] = requestParameters.includeUsing;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItemFromJSON));
    }

    /**
     * 物品情報の一覧を取得します。
     * 物品情報一覧取得
     */
    async getItemList(requestParameters: GetItemListRequest, initOverrides?: RequestInit): Promise<Array<Item>> {
        const response = await this.getItemListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 物品情報を更新します。
     * 物品情報更新
     */
    async updateItemRaw(requestParameters: UpdateItemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateItem.');
        }

        if (requestParameters.item === null || requestParameters.item === undefined) {
            throw new runtime.RequiredError('item','Required parameter requestParameters.item was null or undefined when calling updateItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/items`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemToJSON(requestParameters.item),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * 物品情報を更新します。
     * 物品情報更新
     */
    async updateItem(requestParameters: UpdateItemRequest, initOverrides?: RequestInit): Promise<Item> {
        const response = await this.updateItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
